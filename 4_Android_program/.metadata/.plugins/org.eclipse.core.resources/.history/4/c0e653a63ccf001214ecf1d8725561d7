package cc.omusic.musicidentify;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONObject;

import android.util.Log;

public class ServerQuery {
	
	private final String SERVER_URL = "http://music.api.omusic.cc/api/innerapi/testfingerprint2.0.php?fp_code=";
	
	private String JsonStr="";
	private long query_time;
	private final String TAG = "ServerQuery";
	
	public ServerQuery(){
		;
	}
	
	public void getJSON( String fingerprint ){
		HttpEntity entity  = null;
		HttpResponse response = null;
        InputStream instream = null;
		
		String urlstr = SERVER_URL + fingerprint;
		//String urlstr="http://developer.echonest.com/api/v4/song/identify?api_key=AV6AWC8NL7IJPZ5QO&code=eJzNV1mOHTkMu5Ity1qOI0v2_Y8wrBogL3hAnI8gmPlhd7sWyxRJVbfWiNsFpt_gtAv0vm4w9AaTb-DjAn90oswbbLlAn3QDyRuY3iD8Ar9pA40b3NmQukGcC_ym-zJvcGdj1QX-p-ed_Qb3855xgT_qPl_hzpVe4cpVK7vAH3EVcYFG6wZ_kY1-g1wX-I2ulC_QOt3gzsb9vGY3iH2DPS_wF53ycP1r-CM25Ab_VW48I-vXcPiXQDy3bC2t6ZOC5igTMqa1d2pxl7022xijXKf3dRbFXF1jhrZV3RpZpakVTVWV3rnc3JJm7YryfdrM3WMs6qkWFG07s2gOGzmIasytxtzGdDZ8E-yqMbTTbIOzfOaizT9B6Rzfax8wb1W19WSFbMktyj3osArG75hU1JJRJRWWhp04KEomWbgbMUn4TmNDdZ1RQZyhtvfxY7rirLWxhY51ZqlsZI0IaKo5RosYZzOvEAkq0zOXsRrhhtmnevcsaQO-0XZ8W4uVG4Qok57obmiJc--N1_oAuVl8rX0gyqol3LbHQD-YT87uy2dbq2yo1yiNvoQcTTyBg67TcmwfYpx8JKn2ke7sKFHYi6NAHM-0PbDLNJhVUvTJuECrtx2FJFYrsbTVZnPHKUbP7nvkWZAKS5SaTTSE8bF2as33FvUcbUlq87X7QQPUt240birpRG065KSraZrtTqcKix943_e19oGWOM_CqVAQiFmVyyj36H06Oi7oKg5zSknOyUzx4a6MOJq2oQmGdnfg6LFCw6fBXrqYC3QNykopiCMUT56S7TRJOtJbWlBOcBTvLXMeeKkmrRjRIRso7r36PvteFWjN36tfbz5hqO0HvG_-WvsA9PUcYgUhgM52iIqRFxmt_PQO7wlk10iFxkg63igWJgLDAXPiQRdvHdKhA-mpTJn7nE50NprkwbXa2jHZ9xqbTsCtYzkax0geYYVBIKgFz7SKLRw7_XhuGHAmLZG1cEpGdMxYTkYTnDHRgtcEpuKx9dFw2uCdOREwCmPo2fQ8Id2Gi0DE0iU2uiYMPU_NcBvgNXGgH9AGmvK19oGFfxlg5xhZ-PqYh0Egp_RENsHP1ZgmtqDYj28gesHCUfaufW10Oynp2WMNi0MYvAdo7iyVfce2wvv6Xk-GoeKDQ5NajkzHwZCsxcVr6pToHRu-n26eaMEhJUIUoU7CrygDG2I72AxZCiM5igBfC2X_BBNT9nvtA6MPMoGnEv7UAdadjzXUgQptdqhWQT9iUtvWIAT0MYFlqBbmgqHVyDZHNtYjnBQ0B6MIugvEGQxR1fFDpSqh9uwIXgwcsFM-wgMRgcrZeBBIXETgPt1AGiOIx0bMUDtS0d-rYtjo69kF3vp739JHMs-zE2ai96rwGvIBdFC_1z7giEJZiuEUaEAD41Gn-2MIlF8zG6I48Xfx01lMMPg0rIFKOLwaJK6ODDkYd94Z4yJyIyHoTOoKf2OQYIYabLzQXpwDtPT1bIDPc0H5MpzGHtAIBCMnRhuBUaXoLgZepSK0CWJ_b56-HlmNAblMfNJawdjP1YCl6X1VR7A1iCL-3QPZ0uOzUSCgdMGMZ2-DK-E7-8C779faB_4Bx0T9fg==&version=4.12";
		Log.d(TAG, urlstr );
		
		query_time = System.currentTimeMillis();
		HttpClient client = new DefaultHttpClient();
		HttpGet get = new HttpGet(urlstr);
		Log.d(TAG, "new httpget " + (System.currentTimeMillis() - query_time) + " millis");
	        
		// get response
		try {
			response = client.execute(get);
			// Examine the response status
	        Log.d(TAG,response.getStatusLine().toString()); 
	        // Get hold of the response entity
	        entity = response.getEntity();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}                
		//convert to string
        try{
	        if (entity != null) {
	            // A Simple JSON Response Read
	        	instream = entity.getContent();
	            JsonStr= convertStreamToString(instream);
	            query_time = System.currentTimeMillis() - query_time;
	            Log.d(TAG, "query time : " + query_time +"ms");
	            Log.d("result", JsonStr);
				instream.close();
	        }
        } catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	//parse JSON
	private void parseJSON(){
		JSONObject jobj = null;
		JSONObject jresp  = null;
		JSONArray jsonarray = null;;
		
		JSONObject jobj = new JSONObject(JsonStr);
		
		JSONObject jresp  = jobj.getJSONObject( "response" );
		JSONArray jsonarray = jresp.getJSONArray("songs");
		 try{
		//Hashtable<String, String> match = new Hashtable<String, String>();
		//match.put(SCORE_KEY, jobj.getDouble(SCORE_KEY) + "");
		JSONObject jmes = null;
		//Log.d("1","ok");
		for( int i = 0; i< jsonarray.length(); i++){
			JSONObject c = jsonarray.getJSONObject(i);
			String title  = c.getString("title");
			String artist = c.getString("artist_name");
			//match.put(TITLE_KEY, c.getString(TITLE_KEY));
			jmes = c.getJSONObject("message");	
		}
		if( jmes.has("OK")){
			Log.d("tusion", "success get message from echoprint server ");
			//didFindMatchForCode(match, code);
		}
		else{
			//failed to parse JSON
    		;	
		}

		
		
	}
	
	
	
	
	
	
	
	private static String convertStreamToString(InputStream is) 
	{
	    /*
	     * To convert the InputStream to String we use the BufferedReader.readLine()
	     * method. We iterate until the BufferedReader return null which means
	     * there's no more data to read. Each line will appended to a StringBuilder
	     * and returned as String.
	     */
	    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
	    StringBuilder sb = new StringBuilder();

	    String line = null;
	    try {
	        while ((line = reader.readLine()) != null) {
	            sb.append(line + "\n");
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    } finally {
	        try {
	            is.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	    return sb.toString();
	}
	
	
	
}
