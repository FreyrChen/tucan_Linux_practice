#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "fooid.h"
//#include "sndfile.h"

#define SAMPLERRATE 44100
#define CHANNELS 	2 		//should consider nano, reduce time cost.

//pcm array is input wav file's data 441000Hz
//num_samples is number of sample data pcm array
unsigned char*  fingerprint( float pcm[], unsigned int num_samples )
{

	int samplerrate = SAMPLERRATE;
	int channels = CHANNELS;

//    SF_INFO * sfinfo = malloc(sizeof(*sfinfo));
	//use sndfile.c read wav file 
//    SNDFILE * file = sf_open(argv[1], SFM_READ, sfinfo);

	//print wav file's channel & sample rate
//    print_file_info(sfinfo);
	 
	//initial t_fooid struct, reasample wav file to 8000hz.
    t_fooid * fooid = fp_init( samplerrate, channels );

    float * data = malloc(sizeof(float) * channels * samplerrate );

    int centiseconds = 0;
	int offset = 0;
	int len = channels * samplerrate; // every chip is 1s
	int result;

    while ( offset < num_samples )
    {
		//return the number of  items read, every loop read 1s data from wav file
		memcpy( data, pcm + offset, sizeof( float ) *len);
		offset += len;

		//1/100 seconds
		int items_read = channels *  samplerrate;
        centiseconds += 100 * channels * samplerrate / items_read;
		/*
		printf(" read data cetiseconds:%d, len=%d, offset=%d, num_samples=%d \n", 
				centiseconds, len, offset, num_samples);
		*/
       // int result = fp_feed_short(fooid, data, items_read);
		result = fp_feed_float( fooid, data, len );
        if (result < 0)
        {
            //printf("fp_feed_float() Error!\n");
            break;
        }
    }

	//fp_size == 424
    unsigned char * buffer =  malloc(fp_getsize(fooid));

    result = fp_calculate(fooid, centiseconds, buffer);

    fp_free(fooid);
    free(data);

    if (result <0 )
	{
		return NULL;
	}
	else
    {
		return buffer;
		/*
        int i;
        for (i = 0; i < fp_getsize(fooid); i++)
        {
            if (!(i % 32))
            {
                printf("\n");
            }

            printf("%02x ", (int) buffer[i]);
        }

        printf("\n");
		*/
    }

//    free(buffer);
//    free(sfinfo);

//    return 0;
}
