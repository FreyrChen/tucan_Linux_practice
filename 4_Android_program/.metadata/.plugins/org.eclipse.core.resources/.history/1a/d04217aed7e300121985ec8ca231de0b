package cc.omusic.fingerprintjni;

import java.io.File;
import java.io.IOException;

import cc.omusic.fingerprintjni.WavFile;
import android.util.Log;



public class FingerprintWraper {
	
	String TAG = "FingerprintWraper";
	boolean isWavInit = false;
	int numChannels = 0;
	WavFile wavFile = null;
	
	public FingerprintWraper(){
		
		//inital wav file
		if( isWavInit == false ){
			String file_path = "/storage/sdcard0/omusic/test.wav";
			try {
				// Open the wav file specified as the first argument
				WavFile wavFile = WavFile.openWavFile( new File(file_path) );
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (WavFileException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		// Get the number of audio channels in the wav file
		numChannels = wavFile.getNumChannels();
		
	}
	
	// in native code to read a wav file in SD card.
	public short* getWavData( int offset, int numSamples)
	{
		int buffer[] = new int[numSamples];

		// Read frames into buffer
		int framesRead = 0;
		try {
			framesRead = wavFile.readFrames(buffer, offset, numSamples/numChannels);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WavFileException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Log.i(TAG, "framesRead=" + framesRead);
		
		for( int i=0; i<numSamples; i++ )
		{
			data[i] = (short)buffer[i];
		}
		
		buffer = null; //free memory
		
		return data;
	}
	/**
	 * Invoke the fingerprint native library and generate the fingerprint code.<br>
	 * Since echoprint requires the audio data to be an array of floats in the<br>
	 * range [-1, 1] this method will normalize the data array transforming the<br>
	 * 16 bit signed shorts into floats. 
	 * 
	 * @param data PCM encoded data as shorts
	 * @param numSamples number of PCM samples at 44,100 Hz, 2 channel.
	 * @return The generated fingerprint 
	 */
	public native byte[] fingerprint(int samplerate, int channels);

	
    /* this is used to load the 'hello-jni' library on application
     * startup. The library has already been unpacked into
     * /data/data/com.example.hellojni/lib/libhello-jni.so at
     * installation time by the package manager.
     */
	static 
	{	
        try{
			//shared lib called libfingerprint-jin.so
        	Log.i("lib","try to load library");
        	//System.loadLibrary("fingerprint-jin");
        	System.loadLibrary("AndroidFingerprint");
		}catch( UnsatisfiedLinkError use ){
			Log.e("lib", "could not load native library AndroidFingerprint");
		}
    }
	
	public byte[] generate(int samplerate, int channels)
	{
		if ( samplerate == 44100  && channels == 2){
			return fingerprint(samplerate, channels);
		}
		else{
			Log.e(TAG, " input pcm invalide");
			return null;
		}
	}
	
	public byte[] generate()
	{
		return fingerprint(44100, 2);
	}
	

	/*
	public byte[] generate(short data[], int numSamples)
	{
		return fingerprint(data, numSamples);
	}
	
	
	public byte[] generate(int data[], int numSamples)
	{
		// echoprint expects data as floats, which is the native value for 
		// core audio data, and I guess ffmpeg
		// Android records data as 16 bit shorts, so we need to normalize the
		// data before sending it to echoprint
		short buffer[] = new short[numSamples];
		for( int i=0; i<numSamples; i++ )
		{
			buffer[i] = (short)data[i];
		}

		return fingerprint(buffer, numSamples);
	}
	*/

	
}
