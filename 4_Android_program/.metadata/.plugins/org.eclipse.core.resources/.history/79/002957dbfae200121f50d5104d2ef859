package cc.omusic.fingerprintver1lib;

import java.io.File;
import java.io.IOException;
import java.util.Random;

import cc.omusic.fingerprintjni.FingerprintWraper;

import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.view.Menu;
import android.widget.TextView;


public class MainActivity extends Activity {

	private SDRecord SDRecorder;
	//private File RecordMusicFile;
	private File RecordMusicDir;
	private File testFile;
	private MusicRecorder musicRecorder = null;
	private TextView infoText;
	private String TAG = "main";
	private long fingerprint_time=0;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		infoText = (TextView) findViewById( R.id.info_text);
		
		SDRecorder = new SDRecord();
		RecordMusicDir = SDRecorder.createSDDir( "omusic" );
		testFile = new File(RecordMusicDir.getAbsolutePath()
							+ File.separator 
							+ "test.wav");
		
		//initial audio recorder
		musicRecorder =  new MusicRecorder();


		
		String text = "";
		fingerprint_time = System.currentTimeMillis();
		//int data_len = 44100*2*120;		//21.168Mb
		//float data[] = new float[ data_len ];
		/*
		float []  data = musicRecorder.readWavFileToFloatArray( testFile , data_len );
		
		for( int i=4000; i<4010; i++)
		{
			Log.i(TAG,"data[" + i + "]=" + String.valueOf(data[i]) );
		}
		*/
		/*
		Random ran = new Random();
		for( int i=0; i<data_len;  i++ )
		{
			//data[i] = ran.nextFloat();	//[0-1]
			data[i] = 0.5f;
		}
		*/
		
		
	
			// Open the wav file specified as the first argument
			WavFile wavFile = WavFile.openWavFile( testFile );

			// Display information about the wav file
			wavFile.display();

			// Get the number of audio channels in the wav file
			int numChannels = wavFile.getNumChannels();

			// Create a buffer of 100 frames
			double[] buffer = new double[100 * numChannels];

			int framesRead;

			// Read frames into buffer
			framesRead = wavFile.readFrames(buffer, 5000);
			
			for( int i=4000; i<4010;  i++ )
			{
				Log.i(TAG,"data[" + i + "]=" + String.valueOf(buffer[i]) );
			}

			// Close the wavFile
			wavFile.close();
	

		
		Log.i(TAG,"array generate time: " + fingerprint_time + "ms" );
		infoText.setText( text);
		fingerprint_time = System.currentTimeMillis() - fingerprint_time;
		Log.i(TAG,"array generate time: " + fingerprint_time + "ms" );
		

		//fingerprint_time = System.currentTimeMillis();
		Log.d(TAG,"ready to generate fingerprint");
		Log.d(TAG,"audioData length: " + data.length );
		//audioData.length == read_size;
/*			
		if( data.length != 0 ) {
			Log.d(TAG,"new Fingerprint()" );
			
//			FingerprintVer1 fingerprinter = new FingerprintVer1();
			//String fingerprint = fingerprinter.generate( data, data.length );
//			String fingerprint = fingerprinter.fingerprint(data, data.length );
			fingerprint_time = System.currentTimeMillis();
			FingerprintWraper fp = new FingerprintWraper();
			//String fingerprint = fp.stringFromJNI();
			byte []fp_byte = new byte[424];
			fp_byte = fp.generate(data, data.length);
			
			fingerprint_time = System.currentTimeMillis() - fingerprint_time;
			Log.i(TAG,"fingerprint generate time: " + fingerprint_time + "ms" );

			if( fp_byte == null ){
				infoText.setText( "fingerprint is null ");
			}else{
				infoText.setText("fingerprint : \n" + byteArrayToHexString( fp_byte ) );
				Log.e(TAG,"fp_str: " + byteArrayToHexString(fp_byte));
			}		
			
		}
*/
		
	}

	
	
	public String byteArrayToHexString( byte[] array)
	{
		StringBuilder sb =new StringBuilder();
		for( byte b: array ){
			sb.append(String.format("%02x", b & 0xff));
		}
		return sb.toString();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}

	
	
	
	
	
	
}
