
package cc.omusic.decorder;
import java.io.File;

import android.util.Log;
import cc.omusic.decorder.AudioTools;
//import com.badlogic.gdx.utils.Disposable;

/** Abstract class for audio decoders that return successive amplitude frames. When a decoder is no longer used it has to be
 * disposed.
 * 
 * @author badlogicgames@gmail.com */
//public abstract class Decoder implements Disposable {
/*
public interface Disposable {
	//Releases all resources of this object. 
	public void dispose ();
}
*/
public abstract class Decoder {
	
	String TAG = "Decoeder";
	
	public int  read_music( File SelectedFile){
		 
		String music_end = SelectedFile.getName().substring( SelectedFile.getName().lastIndexOf(".") + 1,
				SelectedFile.getName().length()).toLowerCase();
		
		if( music_end.equals("mp3"))
			playMp3File( SelectedFile );
		else if( music_end.equals("ogg") )
			playOggFile(SelectedFile);
		else if( music_end.equals("wav"))
		{
			playWavFile(SelectedFile);
			//calculateFP(); 
		}

		else
		{
			Log.e(TAG,"music file is not mp3/ogg/wav, can not support!");
		}
		//return read number read samples.
		return 0;
	}

	//mp3 file
	public boolean playMp3File( File mp3file ){
		if( mp3file == null )
			return false;
		if( mp3file.exists())
			return false;
		String file_end = mp3file.getName().substring( mp3file.getName().lastIndexOf(".") + 1,
				     mp3file.getName().length()).toLowerCase();
		if( file_end.equals("mp3") )
		{
			Log.d(TAG, "select music file:" + mp3file.getAbsolutePath());
			Mpg123Decoder mp3 = new Mpg123Decoder( mp3file );
			Log.d( TAG, "channels:" + mp3.getChannels() );
			Log.d( TAG, "rate:" + mp3.getRate() );
			Log.d( TAG, "length:" + mp3.getLength() );
			mp3.dispose();
			return true;
		}
		else
		{
			Log.e( TAG, "select music file is not a mp3 format");
			return false;
		}
	}
	
	//ogg file
	public boolean playOggFile( File Oggfile ){
		if( Oggfile == null && !(Oggfile.exists()))
			return false;
		String file_end = Oggfile.getName().substring( Oggfile.getName().lastIndexOf(".") + 1,
				Oggfile.getName().length()).toLowerCase();
		if( file_end.equals("ogg") )
		{
			Log.d(TAG, "select music file:" + Oggfile.getAbsolutePath());
			VorbisDecoder oog_music = new VorbisDecoder( Oggfile );
			Log.d( TAG, "channels:" + oog_music.getChannels() );
			Log.d( TAG, "rate:" + oog_music.getRate() );
			Log.d( TAG, "length:" + oog_music.getLength() );
			oog_music.dispose();
			return true;
		}
		else
		{
			Log.e( TAG, "select music file is not a ogg format");
			return false;
		}
	}
	
	//wav file
	public boolean playWavFile( File Wavfile ){
		if( Wavfile == null && !(Wavfile.exists()))
			return false;
		String file_end = Wavfile.getName().substring( Wavfile.getName().lastIndexOf(".") + 1,
				Wavfile.getName().length()).toLowerCase();
		if( file_end.equals("wav") )
		{
			Log.d(TAG, "select music file:" + Wavfile.getAbsolutePath());
			WavDecoder wav_music = new WavDecoder( Wavfile );
			Log.d( TAG, "channels:" + wav_music.getChannels() );
			Log.d( TAG, "rate:" + wav_music.getRate() );
			Log.d( TAG, "length:" + wav_music.getLength() );
			wav_music.dispose();
			return true;
		}
		else
		{
			Log.e( TAG, "select music file is not a wav format");
			return false;
		}
	}
	/** Reads in samples.capacity() samples in 16-bit signed PCM short format from the decoder. Returns the actual number read in.
	 * If this number is smaller than the capacity of the buffer then the end of stream has been reached.
	 * 
	 * @param samples The number of samples to read.
	 * @param offset the offset at which to start writting samples to
	 * @return the number of samples read, < numSamples means end of file */
	public abstract int readSamples (short[] samples, int offset, int numSamples);

	private short[] readBuffer;
	private int channels;
	/** Reads in samples.capacity() samples in 32-bit signed PCM float format from the decoder. Returns the actual number read in. 
	 * If this number is smaller than the capacity of the buffer then the end of stream has been reached. 
	 * 
	 * @param samples The number of samples to read.
	 * @param offset the offset at which to start writting samples to
	 * @return the number of samples read, < numSamples means end of file */
	public int readSamples(float[] samples, int offset, int numSamples) {
		if (readBuffer == null || readBuffer.length < numSamples)
			readBuffer = new short[numSamples];
		if (channels <= 0)
			channels = getChannels();
		int result = readSamples(readBuffer, 0, numSamples);
		if (result <= 0) 
			return result;
		AudioTools.toFloat(readBuffer, 0, samples, offset, result);
		return result;
	}
	
	/** Reads in the entire sound file into a single short[] array. */
	public short[] readAllSamples () {
		short[] out = new short[(int)Math.ceil(getLength() * getRate() * getChannels())];
		short[] buffer = new short[1024 * 5];
		int readSamples = 0;
		int totalSamples = 0;

		while ((readSamples = readSamples(buffer, 0, buffer.length)) > 0) {
			if (readSamples + totalSamples >= out.length) {
				short[] tmp = new short[readSamples + totalSamples];
				System.arraycopy(out, 0, tmp, 0, totalSamples);
				out = tmp;
			}
			System.arraycopy(buffer, 0, out, totalSamples, readSamples);
			totalSamples += readSamples;
		}

		if (out.length != totalSamples) {
			short[] tmp = new short[totalSamples];
			System.arraycopy(out, 0, tmp, 0, totalSamples);
			out = tmp;
		}
		return out;

	}

	/** Skips numSamples samples. If the decoded file is in stereo the left and right channel samples are counted as 2 samples.
	 * 
	 * @param numSamples the number of samples to skip
	 * @return the number of samples actually skipped. If this is < numSamples then the end of the file has been reached. */
	public abstract int skipSamples (int numSamples);
	
	/** @return	True if the methods {@link #setPosition(float)} and {@link #getPosition()} can be used, false otherwise. */
	public abstract boolean canSeek();
	
	/** Sets the current position within the file to the specified value if supported
	 * @return True if successful, false otherwise */
	public abstract boolean setPosition(float seconds);
	
	/** @return The current position (in seconds) within the decoder or negative if not supported. */
	public abstract float getPosition();

	/** @return the number of channels */
	public abstract int getChannels ();

	/** @return the sampling rate in herz, e.g. 44100 */
	public abstract int getRate ();

	/** @return the length of the file in seconds */
	public abstract float getLength ();

	/** Disposes the decoder and frees all associated resources */
	public abstract void dispose ();
	
	
}
