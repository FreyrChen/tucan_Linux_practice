#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "common.h"
#include "fooid.h"
//#include "sndfile.h"

//for NDK debug
#include <android/log.h>
#define  LOG_TAG    "fingerprint"
#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)


#define SAMPLERRATE 44100
#define CHANNELS 	2 		//should consider nano, reduce time cost.

//pcm array is input wav file's data 441000Hz
//num_samples is number of sample data pcm array
unsigned char*  fingerprint( float pcm[], unsigned int num_samples )
{

	int samplerrate = SAMPLERRATE;
	int channels = CHANNELS;

	 

	//initial t_fooid struct, reasample wav file to 8000hz.
    t_fooid * fooid = fp_init( samplerrate, channels );
    LOGD("fp_init() complete\n");

    float * data = malloc(sizeof(float) * channels * samplerrate );

    int centiseconds = 0;
	int offset = 0;
	int len = channels * samplerrate; // every chip is 1s
	int result;
    while ( offset < num_samples )
    {
		//return the number of  items read, every loop read 1s data from wav file
		memcpy( data, pcm + offset, sizeof( float ) *len);
		offset += len;

		//1/100 seconds
		int items_read = channels *  samplerrate;
        centiseconds += 100 * channels * samplerrate / items_read;
		//printf(" read data cetiseconds:%d, len=%d, offset=%d, num_samples=%d \n", 
		//		centiseconds, len, offset, num_samples);
		result = fp_feed_float( fooid, data, len );
//		LOGD("fp_feed_float() complete\n");
        if (result < 0)
        {
            //printf("fp_feed_float() Error!\n");
            break;
        }
    }

	//fp_size == 424
    unsigned char * buffer =  malloc(fp_getsize(fooid));

    result = fp_calculate(fooid, centiseconds, buffer);
//    LOGD("fp_calculate() complete\n");
    fp_free(fooid);
    free(data);
//    LOGD("free complete\n");



    if (result <0 )
	{
		return NULL;
	}
	else
    {
		return buffer;
    }


	//return NULL;
}
