#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "common.h"
#include "fooid.h"
//#include "sndfile.h"


#define SAMPLERRATE 44100
#define CHANNELS 	2 		//should consider nano, reduce time cost.
// in resample sub array 44100*2/2048 =43
// so SUB_SECONDS max is 40
#define SUB_SECONDS  10

int initFlag = 0;
t_fooid * fooid = null;
int centiseconds = 0;
int len = 0;
int result;
short * data = null;

//pcm array is input wav file's data 441000Hz
//num_samples is number of sample data pcm array
int fingerprint( short pcm[], unsigned int num_samples,
							unsigned char buffer[] )
{

	int samplerrate = SAMPLERRATE;
	int channels = CHANNELS;

	 
	if( initFlag == 0 )
	{
		//initial t_fooid struct, reasample wav file to 8000hz.
		fooid = fp_init( samplerrate, channels );
	//    LOGD("fp_init() complete\n");
		initFlag = 1;
	}




	//len = (int)(channels * samplerrate / SUB_SECONDS); // every chip is 1s/SUB_SECONDS
	len = (int)(channels * samplerrate );
	data = malloc(sizeof(short) * len );

	//1/100 seconds
	//int items_read = channels *  samplerrate;
	centiseconds += (int)((len * 100 )/(channels * samplerrate))  ;
	printf("num_samples=%d, SUB_SECONDS=%d, centiseconds:%d, items_read=%d \n",
			num_samples, SUB_SECONDS,centiseconds, len );
	//LOGD("ready to fp_short() ... \n");
	//printf("fingerprint: data size(len)=%d",len);

	/**
	*if 8000hz data (resample data) more than 100s, then return 0 (false).
	*if data is not enough, return 1;
	*if error, return -1;
	**/
	result = fp_feed_short( fooid, data, len );
	//LOGD("fp_feed_short() offset=%d, result=%d \n", offset, result);
	if (result < 0)
	{
		//printf("fp_feed_float() Error!\n");
		break;
	}
	return result;
    }


	//fp_size == 424
    //unsigned char * buffer =  malloc(fp_getsize(fooid));
 //   LOGD("fp_calculate() centiseconds=%d\n", centiseconds);
    result = fp_calculate(fooid, centiseconds, buffer);
 //   LOGE("fp_calculate result= %d\n", result);
//    LOGD("fp_calculate() complete\n");
    fp_free(fooid);
    free(data);
 //   LOGD("free complete\n");

    /*
    if (result < 0)
       {
    		LOGE("Failed to calculate fingerprint\n");
       }
       else
       {
           int i;
           for (i = 0; i < 424; i++)
           {
               LOGE("%02x ", (int) buffer[i]);
           }

           LOGE("\n");
       }
	*/
    if (result <0 )
	{
		return 0;
	}
	else
    {
		return 1 ;
    }


	//return NULL;
}
