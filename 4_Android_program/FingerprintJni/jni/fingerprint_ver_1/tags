!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	libresample/resample_defs.h	50;"	d
BOOL	libresample/resample_defs.h	/^  typedef char           BOOL;$/;"	t
COMMON_H	common.h	18;"	d
D2R	libresample/resample_defs.h	39;"	d
EPSILON	common.h	32;"	d
FALSE	common.h	29;"	d
FALSE	libresample/resample_defs.h	28;"	d
FOOIDAPI	fooid.h	25;"	d
FOOIDAPI	fooid.h	27;"	d
FOOIDAPI	fooid.h	30;"	d
FOOIDAPI	win32/Release/fooid.h	11;"	d
FOOIDAPI	win32/Release/fooid.h	14;"	d
FOOIDAPI	win32/Release/fooid.h	9;"	d
FOOID_H	fooid.h	18;"	d
FOOID_H	win32/Release/fooid.h	2;"	d
FPSIZE	common.h	52;"	d
FPVERSION	common.h	51;"	d
FRAME_LEN	common.h	34;"	d
FilterUD	libresample/filterkit.c	/^float FilterUD(float Imp[],  \/* impulse response *\/$/;"	f
FilterUp	libresample/filterkit.c	/^float FilterUp(float Imp[],  \/* impulse response *\/$/;"	f
HARMONIC_H	harmonics.h	18;"	d
HAVE_INTTYPES_H	libresample/configwin.h	6;"	d
IDC_SAMPLERATE	libresample/resource.h	6;"	d
IDD_CONFIG_YRESAMPLE	libresample/resource.h	5;"	d
INLINE	libresample/resample_defs.h	69;"	d
INLINE	libresample/resample_defs.h	71;"	d
IN_LEN	common.h	46;"	d
Imp	libresample/resample.c	/^   float  *Imp;$/;"	m	struct:__anon4	file:
ImpD	libresample/resample.c	/^   float  *ImpD;$/;"	m	struct:__anon4	file:
Izero	libresample/filterkit.c	/^static float Izero(float x)$/;"	f	file:
IzeroEPSILON	libresample/filterkit.c	65;"	d	file:
LIBRESAMPLE_INCLUDED	libresample/resample.h	15;"	d
L_step	s_fft.c	/^static void L_step(const t_fft_data *tb, t_complex *x)$/;"	f	file:
LpFilter	libresample/filterkit.c	/^void LpFilter(float c[], int N, float frq, float Beta, int Num)$/;"	f
LpScl	libresample/resample.c	/^   float   LpScl;$/;"	m	struct:__anon4	file:
MAX	libresample/resample_defs.h	43;"	d
MAX_BARK	common.h	36;"	d
MIN	libresample/resample_defs.h	46;"	d
Nmult	libresample/resample.c	/^   UWORD   Nmult;$/;"	m	struct:__anon4	file:
Npc	libresample/resample_defs.h	76;"	d
Nwing	libresample/resample.c	/^   UWORD   Nwing;$/;"	m	struct:__anon4	file:
OBJS	Makefile	/^OBJS = common.o \\$/;"	m
PI	common.h	31;"	d
PI	libresample/resample_defs.h	32;"	d
PI2	libresample/resample_defs.h	36;"	d
R2D	libresample/resample_defs.h	40;"	d
REGRESS_H	regress.h	18;"	d
SFM_H	spectrum.h	18;"	d
SGN	libresample/resample_defs.h	54;"	d
SPEC_LEN	common.h	35;"	d
SSIZE	common.h	41;"	d
S_FFT_DEFINED	s_fft.h	18;"	d
SrcUD	libresample/resamplesubs.c	/^int SrcUD(float X[],$/;"	f
SrcUp	libresample/resamplesubs.c	/^int SrcUp(float X[],$/;"	f
TRUE	common.h	30;"	d
TRUE	libresample/resample_defs.h	24;"	d
Time	libresample/resample.c	/^   float  Time;$/;"	m	struct:__anon4	file:
UWORD	libresample/resample_defs.h	/^  typedef uint32_t       UWORD;$/;"	t
UWORD	libresample/resample_defs.h	/^  typedef unsigned int   UWORD;$/;"	t
WORD	libresample/resample_defs.h	/^  typedef int            WORD;$/;"	t
WORD	libresample/resample_defs.h	/^  typedef int32_t        WORD;$/;"	t
X	libresample/resample.c	/^   float  *X;$/;"	m	struct:__anon4	file:
XSize	libresample/resample.c	/^   UWORD   XSize;$/;"	m	struct:__anon4	file:
Xoff	libresample/resample.c	/^   UWORD   Xoff;$/;"	m	struct:__anon4	file:
Xp	libresample/resample.c	/^   UWORD   Xp; \/* Current "now"-sample pointer for input *\/$/;"	m	struct:__anon4	file:
Xread	libresample/resample.c	/^   UWORD   Xread; \/* Position to put new samples *\/$/;"	m	struct:__anon4	file:
Y	libresample/resample.c	/^   float  *Y;$/;"	m	struct:__anon4	file:
YSize	libresample/resample.c	/^   UWORD   YSize;$/;"	m	struct:__anon4	file:
Yp	libresample/resample.c	/^   UWORD   Yp;$/;"	m	struct:__anon4	file:
_APS_NEXT_COMMAND_VALUE	libresample/resource.h	13;"	d
_APS_NEXT_CONTROL_VALUE	libresample/resource.h	14;"	d
_APS_NEXT_RESOURCE_VALUE	libresample/resource.h	12;"	d
_APS_NEXT_SYMED_VALUE	libresample/resource.h	15;"	d
__RESAMPLE_DEFS__	libresample/resample_defs.h	15;"	d
avg_dom	common.h	/^    short avg_dom;$/;"	m	struct:t_fingerprint
avg_fit	common.h	/^    short avg_fit;$/;"	m	struct:t_fingerprint
bitlen	common.c	/^const int bitlen(int n)$/;"	f
cb_size	common.h	/^    int cb_size[MAX_BARK];$/;"	m	struct:t_fooid
cb_start	common.h	/^    int cb_start[MAX_BARK];$/;"	m	struct:t_fooid
channels	common.h	/^    int channels;$/;"	m	struct:t_fooid
cos3_t	s_fft.h	/^    float cos3_t;$/;"	m	struct:__anon2
cos_t	s_fft.h	/^    float cos_t;$/;"	m	struct:__anon2
do_linear_regress	regress.c	/^void do_linear_regress(float *dbspec, int len, float *r)$/;"	f
dom	common.h	/^    unsigned char dom[66];$/;"	m	struct:t_fingerprint
fast_reorder	s_fft.c	/^static void fast_reorder(const t_fft_data *tb, t_complex *x)$/;"	f	file:
fft	s_fft.c	/^void fft(const t_fft_data *tb, t_complex *x)$/;"	f
fft_free	s_fft.c	/^void fft_free(t_fft_data *tb)$/;"	f
fft_init	s_fft.c	/^t_fft_data* fft_init(const int fftsize)$/;"	f
fft_proc_split	s_fft.c	/^static void fft_proc_split(const t_fft_data *tb, t_complex *x)$/;"	f	file:
fp	common.h	/^    struct t_fingerprint fp;$/;"	m	struct:t_fooid	typeref:struct:t_fooid::t_fingerprint
fp_calculate	fooid.c	/^FOOIDAPI int fp_calculate(t_fooid *fi, int songlen, unsigned char* buff)$/;"	f
fp_feed_float	fooid.c	/^FOOIDAPI int fp_feed_float(t_fooid * fid, float *data, int len)$/;"	f
fp_feed_short	fooid.c	/^FOOIDAPI  int fp_feed_short(t_fooid *fid, short *data, int len)$/;"	f
fp_free	fooid.c	/^FOOIDAPI void fp_free(t_fooid * fid)$/;"	f
fp_getsize	fooid.c	/^FOOIDAPI int fp_getsize(t_fooid *fi)$/;"	f
fp_getversion	fooid.c	/^FOOIDAPI int fp_getversion(t_fooid *fi)$/;"	f
fp_init	fooid.c	/^FOOIDAPI struct t_fooid* fp_init(int samplerate, int channels)$/;"	f
get_dbpower	spectrum.c	/^static void get_dbpower(t_complex *work, float *dbpower)$/;"	f	file:
get_dominant_harmonic	harmonics.c	/^void get_dominant_harmonic(const t_complex *data, int *idom)$/;"	f
get_params	spectrum.c	/^void get_params(t_fooid *fi)$/;"	f
im	s_fft.h	/^    float im;$/;"	m	struct:__anon1
init_scales	spectrum.c	/^void init_scales(t_fooid *fi)$/;"	f
init_sine_window	spectrum.c	/^void init_sine_window(t_fooid *fi)$/;"	f
length	common.h	/^    int length;$/;"	m	struct:t_fingerprint
line_to_cb	common.h	/^    int line_to_cb[SPEC_LEN];$/;"	m	struct:t_fooid
main	main.c	/^int main(int argc, char ** argv)$/;"	f
maxFactor	libresample/resample.c	/^   float  maxFactor;$/;"	m	struct:__anon4	file:
max_sfb	common.h	/^    int max_sfb;$/;"	m	struct:t_fooid
min	fooid.c	/^int min(int a, int b) { return (a < b) ? a : b; }$/;"	f
minFactor	libresample/resample.c	/^   float  minFactor;$/;"	m	struct:__anon4	file:
outpos	common.h	/^    int outpos;$/;"	m	struct:t_fooid
print_file_info	main.h	/^void print_file_info(SF_INFO * file_info)$/;"	f
quantize_harmonic	harmonics.c	/^static const int quantize_harmonic(const float dom)$/;"	f	file:
quantize_r	spectrum.c	/^static int quantize_r(const float r, const int band)$/;"	f	file:
r	common.h	/^    unsigned char r[348];$/;"	m	struct:t_fingerprint
radix_2_step	s_fft.c	/^static void radix_2_step(const t_fft_data *tb, t_complex *x)$/;"	f	file:
re	s_fft.h	/^    float re;$/;"	m	struct:__anon1
resample_close	libresample/resample.c	/^void resample_close(void *handle)$/;"	f
resample_get_filter_width	libresample/resample.c	/^int resample_get_filter_width(void   *handle)$/;"	f
resample_h	common.h	/^    void *resample_h;$/;"	m	struct:t_fooid
resample_open	libresample/resample.c	/^void *resample_open(int highQuality, float minFactor, float maxFactor)$/;"	f
resample_process	libresample/resample.c	/^int resample_process(void   *handle,$/;"	f
resample_ratio	common.h	/^    float resample_ratio;$/;"	m	struct:t_fooid
round	common.c	/^const int round(const float x) {$/;"	f
round	common.c	/^const int round(const float x)$/;"	f
rsdata	libresample/resample.c	/^} rsdata;$/;"	t	typeref:struct:__anon4	file:
samplerate	common.h	/^    int samplerate;$/;"	m	struct:t_fooid
samples	common.h	/^    float *samples;$/;"	m	struct:t_fooid
sbuffer	common.h	/^    float *sbuffer;$/;"	m	struct:t_fooid
seed_tab	s_fft.h	/^    unsigned *seed_tab;$/;"	m	struct:__anon3
sin3_t	s_fft.h	/^    float sin3_t;$/;"	m	struct:__anon2
sin_t	s_fft.h	/^    float sin_t;$/;"	m	struct:__anon2
size	s_fft.h	/^    int size;$/;"	m	struct:__anon3
soundfound	common.h	/^    int soundfound;$/;"	m	struct:t_fooid
t_complex	s_fft.h	/^} t_complex;$/;"	t	typeref:struct:__anon1
t_fft_data	s_fft.h	/^t_fft_data;$/;"	t	typeref:struct:__anon3
t_fingerprint	common.h	/^struct t_fingerprint$/;"	s
t_fooid	common.h	/^struct t_fooid$/;"	s
t_fooid	fooid.h	/^typedef struct t_fooid t_fooid;$/;"	t	typeref:struct:t_fooid
t_fooid	win32/Release/fooid.h	/^typedef struct t_fooid t_fooid;$/;"	t	typeref:struct:t_fooid
t_twiddle	s_fft.h	/^} t_twiddle;$/;"	t	typeref:struct:__anon2
toBARK	spectrum.c	/^static const float toBARK(const float f)$/;"	f	file:
twiddle_tab	s_fft.h	/^    t_twiddle *twiddle_tab;$/;"	m	struct:__anon3
version	common.h	/^    short version;$/;"	m	struct:t_fingerprint
window	common.h	/^    float window[SPEC_LEN];$/;"	m	struct:t_fooid
windowize	spectrum.c	/^static void windowize(float *window, float *smp)$/;"	f	file:
work	s_fft.h	/^    t_complex *work;$/;"	m	struct:__anon3
